{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computer Vision \u00b6 Cheat Sheet for Computer Vision","title":"Home"},{"location":"#computer-vision","text":"Cheat Sheet for Computer Vision","title":"Computer Vision"},{"location":"project/augmented-reality/","text":"Augmented Reality 2D \u00b6 Introduction \u00b6 Apa itu Augmented Reality (AR) ?. Secara sederhana dapat diartikan sebagai pengalaman pengguna (user) pada suatu objek yang ditingkatkan (augmented) oleh komputer. Jadi intinya terdapat pengguna (user) dan terdapat objek yang di-augmented oleh komputer. Simple AR with OpenCV \u00b6 Tujuan dari pages kali ini adalah untuk mendemonstrasikan pembuatan AR sederhana menggunakan pustaka OpenCV. Repository source code dapat dilihat pada ruhyadi/Augmented-Reality . Langkah pembuatan aplikasi sebagai berikut: 1. Feature Detection \u00b6 Feature detection merupakan metode untuk mendeteksi fitur/landmark/pola penting pada suatu citra/gambar. Fitur yang dimaksud dalam hal ini adalah pola pembeda yang dapat membedakan gambar satu dengan lainnya. Terdapat berbagai macam fitur detection yang tersedia pada pustaka OpenCV, seperti: Scale Invariant Feature Transform (SIFT) Speeded-Up Robust Features (SURF) Features from Accelerated Segment Test (FAST) Binary Robust Independent Elementary Features (BRIEF) Oriented FAST and Rotated BRIEF (ORB) Dalam implementasi kali ini kita akan menggunakan ORB feature detection yang tersedia pada fungsi cv2.ORB_create() di OpenCV.","title":"Augmented Reality"},{"location":"project/augmented-reality/#augmented-reality-2d","text":"","title":"Augmented Reality 2D"},{"location":"project/augmented-reality/#introduction","text":"Apa itu Augmented Reality (AR) ?. Secara sederhana dapat diartikan sebagai pengalaman pengguna (user) pada suatu objek yang ditingkatkan (augmented) oleh komputer. Jadi intinya terdapat pengguna (user) dan terdapat objek yang di-augmented oleh komputer.","title":"Introduction"},{"location":"project/augmented-reality/#simple-ar-with-opencv","text":"Tujuan dari pages kali ini adalah untuk mendemonstrasikan pembuatan AR sederhana menggunakan pustaka OpenCV. Repository source code dapat dilihat pada ruhyadi/Augmented-Reality . Langkah pembuatan aplikasi sebagai berikut:","title":"Simple AR with OpenCV"},{"location":"project/augmented-reality/#1-feature-detection","text":"Feature detection merupakan metode untuk mendeteksi fitur/landmark/pola penting pada suatu citra/gambar. Fitur yang dimaksud dalam hal ini adalah pola pembeda yang dapat membedakan gambar satu dengan lainnya. Terdapat berbagai macam fitur detection yang tersedia pada pustaka OpenCV, seperti: Scale Invariant Feature Transform (SIFT) Speeded-Up Robust Features (SURF) Features from Accelerated Segment Test (FAST) Binary Robust Independent Elementary Features (BRIEF) Oriented FAST and Rotated BRIEF (ORB) Dalam implementasi kali ini kita akan menggunakan ORB feature detection yang tersedia pada fungsi cv2.ORB_create() di OpenCV.","title":"1. Feature Detection"},{"location":"setup/build-opencv-docker/","text":"Build OpenCV on Docker \u00b6","title":"On Docker"},{"location":"setup/build-opencv-docker/#build-opencv-on-docker","text":"","title":"Build OpenCV on Docker"},{"location":"setup/build-opencv-env/","text":"Build OpenCV on Virtual Environment \u00b6 Page ini akan menjelaskan tahap build opencv dari source pada virtual environment Anaconda pada sistem operasi linux. Install Virtual Environment \u00b6 Virtual environment merupakan lingkungan pengembangan yang terpisah dengan lingkungan utama komputer. Dengan demikian kita dapat menginstal versi library yang berbeda pada setiap virtual environment. Terdapat berbagai macam virtual environment, salah satunya Anaconda . Anaconda merupakan virtual env python yang include dengan library bawaannya, seperti numpy, scipy, matplotlib dll. Ketimbang Anaconda, penulis lebih memilih Miniconda (versi lite Anaconda). Tahap instalasinya dapat dilihat pada page official miniconda . Create Conda Virtual Env \u00b6 Virtual Env pada Anaconda/Miniconda dapat dibuat dengan perintah berikut: conda create -n [nama-env] python==[versi] numpy conda create -n vision python==3.7 numpy [nama-env] dapat diisi dengan nama virtual env yang akan dibuat, dicontohkan dengan vision . Versi python dapat diisikan dengan versi yang dikehendaki, dicontohkan dengan versi python==3.7 . Kemudian, numpy diperlukan sebagai depedensi dari OpenCV sendiri. Clone OpenCV \u00b6 Source code OpenCV dapat diakses pada github opencv . Terdapat dua source code yang harus di-clone: opencv dan opencv_contrib . Kedua source code dapat di-clone melalui git, git clone https://github.com/opencv/opencv git clone https://github.com/opencv/opencv_contrib cd opencv git checkout 4.1.2 cd ../opencv_contrib git checkout 4.1.2 atau dapat clone (download) melalui page release opencv dan page tags opencv_contrib . Penulis sarankan menggunakan cara ini, karena proses clone akan spesifik pada versi yang dituju. Versi yang penulis gunakan dalam penulisan kali ini adalah versi OpenCV 4.1.2 . Yang penulis clone (donwload) pada tautan opencv 4.1.2 dan opencv_contrib 4.1.2 . Make Build Folder \u00b6 Selanjutnya, buat folder yang BUILD (nama untuk memudahkan) yang berisi opencv dan opencv_contrib dengan nama yang sudah diubah (tidak ada tambahan versi) seperti berikut: \u251c\u2500\u2500 BUILD-FOLDER \u2502 \u251c\u2500\u2500 opencv \u2502 \u2514\u2500\u2500 opencv_contrib Installing Depedencies \u00b6 Depedencies merupakan library yang diperlukan untuk dapat build OpenCV dari source. Library ini diperlukan untuk mendukung kerja OpenCV yang customable. OpenCV customable menjadi pembeda dengan OpenCV yang di-install langsung menggunakan pip pada Python seperti biasanya. Library yang diperlukan meliputi: Caution Diperlukan sekitar 300 mb data untuk download dan 800 mb untuk space. Essential Library \u00b6 sudo apt-get install build-essential \\ cmake git unzip wget pkg-config Image and Video Depedencies \u00b6 sudo apt-get install zlib1g-dev libjpeg-dev libjpeg8-dev \\ libjpeg-turbo8-dev libpng-dev libtiff-dev libglew-dev \\ libavcodec-dev libavformat-dev libswscale-dev libgtk2.0-dev \\ libgtk-3-dev libcanberra-gtk* libxvidcore-dev libx264-dev \\ libgtk-3-dev qt5-default libtbb2 libtbb-dev libdc1394-22-dev \\ libxine2-dev gstreamer1.0-tools libgstreamer-plugins-base1.0-dev \\ libgstreamer-plugins-good1.0-dev libv4l-dev v4l-utils qv4l2 \\ libfaac-dev libmp3lame-dev libtheora-dev Additional Depedencies \u00b6 sudo apt-get install libtesseract-dev libxine2-dev libpostproc-dev \\ libavresample-dev libvorbis-dev libopencore-amrnb-dev \\ libopencore-amrwb-dev libopenblas-dev libatlas-base-dev \\ libblas-dev liblapack-dev liblapacke-dev libeigen3-dev \\ gfortran libhdf5-dev libprotobuf-dev protobuf-compiler \\ libgoogle-glog-dev libgflags-dev Build OpenCV \u00b6 Build OpenCv dilakukan menggunakan Cmake . Untuk dapat melakukannya dibuat cmake script terlebih dahulu seperti script dibawah. #!/bin/sh CONDA_ENV_PATH = /home/didi/miniconda3/envs #(1) CONDA_ENV_NAME = vision #(2) WHERE_OPENCV = ../opencv #(3) WHERE_OPENCV_CONTRIB = ../opencv_contrib #(4) cmake -D CMAKE_BUILD_TYPE = RELEASE \\ -D CMAKE_INSTALL_PREFIX = /usr/local \\ -D PYTHON3_EXECUTABLE = $CONDA_ENV_PATH / $CONDA_ENV_NAME /bin/python \\ -D OPENCV_EXTRA_MODULES_PATH = $WHERE_OPENCV_CONTRIB /modules \\ -D BUILD_EXAMPLES = ON $WHERE_OPENCV -D INSTALL_C_EXAMPLES = OFF \\ -D INSTALL_PYTHON_EXAMPLES = OFF \\ -D WITH_QT = ON \\ -D OPENCV_GENERATE_PKGCONFIG = ON \\ -D OPENCV_ENABLE_NONFREE = ON \\ -D WITH_GSTREAMER = ON \\ Directory Anaconda/Miniconda Nama dari virtual environment Directory opencv Directory opencv_contrib Simpan cmake script dengan nama buildopencv.sh dan simpan pada directory berikut. Selanjutnya, buat directory/folder baru bernama build . Dapat dibuat dengan perintah mkdir build . \u251c\u2500\u2500 BUILD-FOLDER | \u251c\u2500\u2500 build | \u251c\u2500\u2500 opencv \u2502 \u251c\u2500\u2500 opencv_contrib \u2502 \u2514\u2500\u2500 buildopencv.sh Building Cmake \u00b6 Selanjutnya proses build cmake opencv berlangsung cd build ../buildopencv.sh Jika berhasil akan terdapat pesan sebagai berikut di terminal ... -- Python 3: -- Interpreter: /home/didi/miniconda3/envs/rtm3d/bin/python (ver 3.7) -- Libraries: /home/didi/miniconda3/envs/rtm3d/lib/libpython3.7m.so (ver 3.7.0) -- numpy: /home/didi/miniconda3/envs/rtm3d/lib/python3.7/site-packages/numpy/core/include (ver 1.20.3) -- install path: lib/python3.7/site-packages/cv2/python-3.7 ... Start Building OpenCV \u00b6 Build OpenCV dari cmake yang telah dibuat make -j4 #(1) ubah -j#, dimana # merupakan core yang tersedia pada CPU Setelah proses kompilasi berhasil, masukan perintah berikut untuk build opencv sudo make install Bersihkan cache kompilasi dengan perintah sudo ldconfig Symbolic Link \u00b6 Library OpenCV yang sudah di-build ternyata tidak dapat langsung digunakan karena berada pada directory yang berbeda dengan directory virtual environment. Oleh karena itu, dilakukan symbolic link untuk dapat menghubungkannya. Python Symbolic Link \u00b6 # opencv directory /usr/local/lib/python3.7/site-packages/cv2/python-3.7/cv2.cpython-37-x86_64-linux-gnu.so # anaconda/virtual env directory in my case /home/didi/miniconda3/envs/rtm3d/lib/python3.7/site-packages/cv2.so Symlink dengan perintah ln -s \\ /usr/local/lib/python3.7/site-packages/cv2/python-3.7/cv2.cpython-37-x86_64-linux-gnu.so \\ /home/didi/miniconda3/envs/rtm3d/lib/python3.7/site-packages/cv2.so C++ Symbolic Link \u00b6 /usr/local/include/opencv4/opencv2 sudo ln -s /usr/local/include/opencv4/opencv2/ /usr/local/include/opencv2","title":"On Virtual Env"},{"location":"setup/build-opencv-env/#build-opencv-on-virtual-environment","text":"Page ini akan menjelaskan tahap build opencv dari source pada virtual environment Anaconda pada sistem operasi linux.","title":"Build OpenCV on Virtual Environment"},{"location":"setup/build-opencv-env/#install-virtual-environment","text":"Virtual environment merupakan lingkungan pengembangan yang terpisah dengan lingkungan utama komputer. Dengan demikian kita dapat menginstal versi library yang berbeda pada setiap virtual environment. Terdapat berbagai macam virtual environment, salah satunya Anaconda . Anaconda merupakan virtual env python yang include dengan library bawaannya, seperti numpy, scipy, matplotlib dll. Ketimbang Anaconda, penulis lebih memilih Miniconda (versi lite Anaconda). Tahap instalasinya dapat dilihat pada page official miniconda .","title":"Install Virtual Environment"},{"location":"setup/build-opencv-env/#create-conda-virtual-env","text":"Virtual Env pada Anaconda/Miniconda dapat dibuat dengan perintah berikut: conda create -n [nama-env] python==[versi] numpy conda create -n vision python==3.7 numpy [nama-env] dapat diisi dengan nama virtual env yang akan dibuat, dicontohkan dengan vision . Versi python dapat diisikan dengan versi yang dikehendaki, dicontohkan dengan versi python==3.7 . Kemudian, numpy diperlukan sebagai depedensi dari OpenCV sendiri.","title":"Create Conda Virtual Env"},{"location":"setup/build-opencv-env/#clone-opencv","text":"Source code OpenCV dapat diakses pada github opencv . Terdapat dua source code yang harus di-clone: opencv dan opencv_contrib . Kedua source code dapat di-clone melalui git, git clone https://github.com/opencv/opencv git clone https://github.com/opencv/opencv_contrib cd opencv git checkout 4.1.2 cd ../opencv_contrib git checkout 4.1.2 atau dapat clone (download) melalui page release opencv dan page tags opencv_contrib . Penulis sarankan menggunakan cara ini, karena proses clone akan spesifik pada versi yang dituju. Versi yang penulis gunakan dalam penulisan kali ini adalah versi OpenCV 4.1.2 . Yang penulis clone (donwload) pada tautan opencv 4.1.2 dan opencv_contrib 4.1.2 .","title":"Clone OpenCV"},{"location":"setup/build-opencv-env/#make-build-folder","text":"Selanjutnya, buat folder yang BUILD (nama untuk memudahkan) yang berisi opencv dan opencv_contrib dengan nama yang sudah diubah (tidak ada tambahan versi) seperti berikut: \u251c\u2500\u2500 BUILD-FOLDER \u2502 \u251c\u2500\u2500 opencv \u2502 \u2514\u2500\u2500 opencv_contrib","title":"Make Build Folder"},{"location":"setup/build-opencv-env/#installing-depedencies","text":"Depedencies merupakan library yang diperlukan untuk dapat build OpenCV dari source. Library ini diperlukan untuk mendukung kerja OpenCV yang customable. OpenCV customable menjadi pembeda dengan OpenCV yang di-install langsung menggunakan pip pada Python seperti biasanya. Library yang diperlukan meliputi: Caution Diperlukan sekitar 300 mb data untuk download dan 800 mb untuk space.","title":"Installing Depedencies"},{"location":"setup/build-opencv-env/#essential-library","text":"sudo apt-get install build-essential \\ cmake git unzip wget pkg-config","title":"Essential Library"},{"location":"setup/build-opencv-env/#image-and-video-depedencies","text":"sudo apt-get install zlib1g-dev libjpeg-dev libjpeg8-dev \\ libjpeg-turbo8-dev libpng-dev libtiff-dev libglew-dev \\ libavcodec-dev libavformat-dev libswscale-dev libgtk2.0-dev \\ libgtk-3-dev libcanberra-gtk* libxvidcore-dev libx264-dev \\ libgtk-3-dev qt5-default libtbb2 libtbb-dev libdc1394-22-dev \\ libxine2-dev gstreamer1.0-tools libgstreamer-plugins-base1.0-dev \\ libgstreamer-plugins-good1.0-dev libv4l-dev v4l-utils qv4l2 \\ libfaac-dev libmp3lame-dev libtheora-dev","title":"Image and Video Depedencies"},{"location":"setup/build-opencv-env/#additional-depedencies","text":"sudo apt-get install libtesseract-dev libxine2-dev libpostproc-dev \\ libavresample-dev libvorbis-dev libopencore-amrnb-dev \\ libopencore-amrwb-dev libopenblas-dev libatlas-base-dev \\ libblas-dev liblapack-dev liblapacke-dev libeigen3-dev \\ gfortran libhdf5-dev libprotobuf-dev protobuf-compiler \\ libgoogle-glog-dev libgflags-dev","title":"Additional Depedencies"},{"location":"setup/build-opencv-env/#build-opencv","text":"Build OpenCv dilakukan menggunakan Cmake . Untuk dapat melakukannya dibuat cmake script terlebih dahulu seperti script dibawah. #!/bin/sh CONDA_ENV_PATH = /home/didi/miniconda3/envs #(1) CONDA_ENV_NAME = vision #(2) WHERE_OPENCV = ../opencv #(3) WHERE_OPENCV_CONTRIB = ../opencv_contrib #(4) cmake -D CMAKE_BUILD_TYPE = RELEASE \\ -D CMAKE_INSTALL_PREFIX = /usr/local \\ -D PYTHON3_EXECUTABLE = $CONDA_ENV_PATH / $CONDA_ENV_NAME /bin/python \\ -D OPENCV_EXTRA_MODULES_PATH = $WHERE_OPENCV_CONTRIB /modules \\ -D BUILD_EXAMPLES = ON $WHERE_OPENCV -D INSTALL_C_EXAMPLES = OFF \\ -D INSTALL_PYTHON_EXAMPLES = OFF \\ -D WITH_QT = ON \\ -D OPENCV_GENERATE_PKGCONFIG = ON \\ -D OPENCV_ENABLE_NONFREE = ON \\ -D WITH_GSTREAMER = ON \\ Directory Anaconda/Miniconda Nama dari virtual environment Directory opencv Directory opencv_contrib Simpan cmake script dengan nama buildopencv.sh dan simpan pada directory berikut. Selanjutnya, buat directory/folder baru bernama build . Dapat dibuat dengan perintah mkdir build . \u251c\u2500\u2500 BUILD-FOLDER | \u251c\u2500\u2500 build | \u251c\u2500\u2500 opencv \u2502 \u251c\u2500\u2500 opencv_contrib \u2502 \u2514\u2500\u2500 buildopencv.sh","title":"Build OpenCV"},{"location":"setup/build-opencv-env/#building-cmake","text":"Selanjutnya proses build cmake opencv berlangsung cd build ../buildopencv.sh Jika berhasil akan terdapat pesan sebagai berikut di terminal ... -- Python 3: -- Interpreter: /home/didi/miniconda3/envs/rtm3d/bin/python (ver 3.7) -- Libraries: /home/didi/miniconda3/envs/rtm3d/lib/libpython3.7m.so (ver 3.7.0) -- numpy: /home/didi/miniconda3/envs/rtm3d/lib/python3.7/site-packages/numpy/core/include (ver 1.20.3) -- install path: lib/python3.7/site-packages/cv2/python-3.7 ...","title":"Building Cmake"},{"location":"setup/build-opencv-env/#start-building-opencv","text":"Build OpenCV dari cmake yang telah dibuat make -j4 #(1) ubah -j#, dimana # merupakan core yang tersedia pada CPU Setelah proses kompilasi berhasil, masukan perintah berikut untuk build opencv sudo make install Bersihkan cache kompilasi dengan perintah sudo ldconfig","title":"Start Building OpenCV"},{"location":"setup/build-opencv-env/#symbolic-link","text":"Library OpenCV yang sudah di-build ternyata tidak dapat langsung digunakan karena berada pada directory yang berbeda dengan directory virtual environment. Oleh karena itu, dilakukan symbolic link untuk dapat menghubungkannya.","title":"Symbolic Link"},{"location":"setup/build-opencv-env/#python-symbolic-link","text":"# opencv directory /usr/local/lib/python3.7/site-packages/cv2/python-3.7/cv2.cpython-37-x86_64-linux-gnu.so # anaconda/virtual env directory in my case /home/didi/miniconda3/envs/rtm3d/lib/python3.7/site-packages/cv2.so Symlink dengan perintah ln -s \\ /usr/local/lib/python3.7/site-packages/cv2/python-3.7/cv2.cpython-37-x86_64-linux-gnu.so \\ /home/didi/miniconda3/envs/rtm3d/lib/python3.7/site-packages/cv2.so","title":"Python Symbolic Link"},{"location":"setup/build-opencv-env/#c-symbolic-link","text":"/usr/local/include/opencv4/opencv2 sudo ln -s /usr/local/include/opencv4/opencv2/ /usr/local/include/opencv2","title":"C++ Symbolic Link"}]}